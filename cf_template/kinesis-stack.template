{
	"AWSTemplateFormatVersion" : "2010-09-09",
	"Description" : "Version 0.0.7 template for creating an Auto Scaling Group of instances with a Kinesis Consumer and a DB Routing Server",

	"Parameters" : {

		"KinesisConsumerInstanceType" : {
			"Description" : "Type of instance to be used for the Kinesis Consumers Auto Scaling Group",
			"Type" : "String"
		},

		"PrivateSubnetOne" : { 
			"Description" : "Private Subnet in us-east-1a",
			"Type" : "AWS::EC2::Subnet::Id"
		},

		"PrivateSubnetTwo" : { 
			"Description" : "Private Subnet in us-east-1c",
			"Type" : "AWS::EC2::Subnet::Id"
		},

		"KinesisConsumerSecurityGroup" : {
			"Description" : "Security Group Id for the Web Servers Auto Scaling Group",
			"Type" : "AWS::EC2::SecurityGroup::Id"
		},

		"KinesisKeyPair" : {
			"Description" : "KeyPair credentials",
			"Type" : "AWS::EC2::KeyPair::KeyName",
			"Default" : "AppServer"
		},

		"KinesisConsumerBucket" : {
			"Description" : "S3 bucket holding Kinesis Consumer files",
			"Type" : "String",
			"Default" : "dev-instance-code-1-2015"
		},

		"ProductionEnvironment" : {
			"Description" : "Production environment for the VPC - (Dev1, Alpha, Beta, Pre-Prod, Prod, Test)",
			"Type" : "String",
			"Default" : "Dev1",
			"AllowedValues" : [ "Dev1", "Alpha", "Beta", "Pre-Prod", "Prod", "Test" ],
			"ConstraintDescription" : "must be either Dev1, Alpha or Prod."
		},

		"DynamoUserTable" : {
			"Description" : "Name of the DynamoDB table which will reference active users",
			"Type" : "String",
			"Default" : "TokenStore"
		},

		"CryptoPassPhrase" : {
			"Description" : "Passphrase used to decrypt incoming data on the KCL",
			"Type": "String",
			"Default" : "letmein345",
			"NoEcho" : true
		},

		"MongoPrimaryPrivateIp" : {
			"Description" : "Private Ip of the Mongo Primary used by Mongoose",
			"Type" : "String",
			"AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
			"ConstraintDescription" : "must be a valid IP address of the form x.x.x.x"
		},

		"MongoSecondaryPrivateIp" : {
			"Description" : "Private Ip of one of the Mongo Secondaries used by Mongoose",
			"Type" : "String",
			"AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
			"ConstraintDescription" : "must be a valid IP address of the form x.x.x.x"
		},

		"MongoSecondaryTwoPrivateIp" : {
			"Description" : "Private Ip of the other Mongo Secondary used by Mongoose",
			"Type" : "String",
			"AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
			"ConstraintDescription" : "must be a valid IP address of the form x.x.x.x"
		},

		"DatabaseName" : {
			"Description" : "Name of the MongoDB database to use",
			"Type" : "String",
			"Default" : "skynet"
		},

		"Version" : {
			"Description" : "Code Version",
			"Type" : "String",
			"AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
			"ConstraintDescription" : "must be a valid system version in the form x.x.x"
		},

		"ReplicaSetName" : {
			"Description" : "Name of the MongoDB Replica Set",
			"Type" : "String",
			"Default" : "SamTheEagle"
		},
		"KinesisLogStreamName" : {
			"Description" : "Name of the Kinesis Logging Stream to send Log data",
			"Type" : "String",
			"Default" : "Alpha-Logger"
		},
		"CredentialBucket" : {
			"Description" : "Bucket holding configuration files",
			"Type" : "String",
			"Default" : "credentials-1-05182015"
		},
		"LoadBalancerName" : {
			"Description": "Name of the Load Balancer to attach the ASG",
			"Type" : "String"
		}
	}, 

	"Mappings" : {
		"AWSInstanceType2Arch" : {
			"t2.micro"  : { "Arch" : "64" },
			"t2.medium" : { "Arch" : "64" },
			"m1.small"  : { "Arch" : "64" },
			"m1.medium" : { "Arch" : "64" },
			"m3.medium" : { "Arch" : "64" },
			"m3.large"  : { "Arch" : "64" }
		},
		"AWSRegionArch2AMI" : {
			"us-east-1" : { "32" : "ami-1ecae776", "64" : "ami-1ecae776" }
		}
	},

	"Resources" : {

		"KinesisConsumerIAMRole" : {
			"Type" : "AWS::IAM::Role",
			"Properties" : {
				"AssumeRolePolicyDocument" : {
					"Version" : "2012-10-17",
					"Statement" : [{ 
						"Effect" : "Allow",
						"Principal" : {
							"Service" : [ "ec2.amazonaws.com"]
						},
						"Action" : [ "sts:AssumeRole" ]
					}]
				},
				"Path" : "/",
				"Policies" : [{
					"PolicyName" : "root",
					"PolicyDocument" : {
						"Version" : "2012-10-17",
						"Statement" : [
						{
							"Effect" : "Allow",
							"Action" : "cloudformation:DescribeStackResource",
							"Resource" : "*"
						},
						{
							"Effect" : "Allow",
							"Action" : [
								"kinesis:Get*",
								"kinesis:DescribeStream"
							],
							"Resource" : [{ "Fn::Join" : ["", [ "arn:aws:kinesis:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":stream/*" ] ] }]
						},
						{
							"Effect" : "Allow",
							"Action" : [
								"kinesis:DescribeStream",
				                "kinesis:PutRecord",
				                "kinesis:PutRecords"
							],
							"Resource" : [{ "Fn::Join" : ["", [ "arn:aws:kinesis:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":stream/", { "Ref" : "KinesisLogStreamName" } ] ] }]
						},
						{
							"Effect" : "Allow",
							"Action" : [
								"kinesis:ListStreams",
								"dynamodb:ListTables"
							],
							"Resource" : [ "*" ]
						},
						{
							"Effect" : "Allow",
							"Action" : [
								"dynamodb:*"
							],
							"Resource" : [{ "Fn::Join" : ["", [ "arn:aws:dynamodb:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":table/", { "Ref" : "ProductionEnvironment" }, "-", "Consumer" ] ] }, { "Fn::Join" : ["", [ "arn:aws:dynamodb:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":table/", { "Ref" : "ProductionEnvironment" }, "-", { "Ref" : "DynamoUserTable" } ] ] }]
						},
						{
							"Effect" : "Allow",
							"Action" : [
								"s3:ListAllMyBuckets"
							],
							"Resource" : "arn:aws:s3:::*"
						},
						{
							"Effect" : "Allow",
							"Action" : [
								"s3:ListBucket",
								"s3:GetBucketLocation"
							],
							"Resource" : [{ "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "KinesisConsumerBucket" }] ] },{ "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "CredentialBucket" } ] ] }
							]
						},
						{
							"Effect" : "Allow",
							"Action" : [
								"s3:GetObject",
								"s3:PutObject"
							],
							"Resource" : [{ "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "CredentialBucket" },  "/mongo/users/*" ] ] },
							{ "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "KinesisConsumerBucket" }, "/", { "Ref" : "Version"}, "/cron/new-day/*" ] ] },
							{ "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "KinesisConsumerBucket" }, "/", { "Ref" : "Version"}, "/kinesis-consumer/*" ] ] },
							{ "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "KinesisConsumerBucket" }, "/", { "Ref" : "Version"}, "/be-routing-server/*" ] ] }]
						},
						{
							"Effect" : "Allow",
							"Action" : [
								"cloudwatch:PutMetricData"
							],
							"Resource" : [ "*" ]
						}]
					}
				}]
			}
		},

		"KinesisConsumerInstanceProfile" : {
			"Type" : "AWS::IAM::InstanceProfile",
			"Properties" : {
				"Path" : "/",
				"Roles" : [ { "Ref" : "KinesisConsumerIAMRole" } ]
			}
		},

		"KinesisConsumerGroup" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"Properties" : {
				"LaunchConfigurationName" : { "Ref" : "KinesisConsumerConfiguration" },
				"LoadBalancerNames" : [ { "Ref" : "LoadBalancerName" } ], 
				"MaxSize" : "3",
				"MinSize" : "1",
				"Tags" : [{
					"Key" : "Name",
					"Value" : { "Fn::Join" : ["", [ { "Ref" : "ProductionEnvironment" }, "-KinesisConsumer" ] ] },
					"PropagateAtLaunch" : "true"
				}],
				"VPCZoneIdentifier" : [ { "Ref" : "PrivateSubnetOne" }, { "Ref" : "PrivateSubnetTwo" } ]
			}
		},

		"KinesisConsumerConfiguration" : {
			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"Properties" : {
				"IamInstanceProfile" : { "Ref" : "KinesisConsumerInstanceProfile" },
				"ImageId" : { "Fn::FindInMap" : [
					"AWSRegionArch2AMI", 
					{ "Ref" : "AWS::Region"},
					{ "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "KinesisConsumerInstanceType" }, "Arch" ] }
				]},
				"InstanceType" : { "Ref" : "KinesisConsumerInstanceType" },
				"KeyName" : { "Ref" : "KinesisKeyPair" },
				"SecurityGroups" : [ { "Ref" : "KinesisConsumerSecurityGroup" } ],
				"UserData" : { 
					"Fn::Base64" : { "Fn::Join" : ["", [
						"#!/bin/bash\n",
						"yum update -y\n",

						"echo \"sudo /home/ec2-user/bin/start-kcl.sh\" >> /etc/rc.local\n",
						"echo \"sudo /home/ec2-user/bin/start-server.sh\" >> /etc/rc.local\n",

						"/opt/aws/bin/cfn-init -v ",
						"--stack ", { "Ref" : "AWS::StackName" },
						" --resource KinesisConsumerConfiguration ",
						"--configsets config_consumer ",
						"--region ", { "Ref" : "AWS::Region" }, "\n",

						"sed -i \"s/applicationName.*/applicationName = ", { "Ref" : "ProductionEnvironment" }, "-Consumer/g\" /home/ec2-user/kinesis/consumer/app/properties", "\n",

						"/opt/aws/bin/cfn-signal -e $? ",
						"--stack ", { "Ref" : "AWS::StackName"},
						" --resource KinesisConsumerGroup ",
						"--region ", { "Ref" : "AWS::Region" }, "\n"
					]]}

				}
			},
			"Metadata" : {
				"AWS::CloudFormation::Init" : {
					"configSets" : {
						"config_consumer" : ["install_cfn", "install_nodejs", "download_files", "create_config_files", "make_files_executable", "create_log_directories", "startup"]
					},
					"install_cfn" : {
					    "files" : {
						    "/etc/cfn/cfn-hup.conf" : {
						      "content" : { "Fn::Join" : ["", [
						        "[main]\n",
						        "stack=", { "Ref": "AWS::StackId" }, "\n",
						        "region=", { "Ref" : "AWS::Region" }, "\n"
						      ]]},
						      "mode"  : "000400",
						      "owner" : "root",
						      "group" : "root"
						    },
					    	"/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
						        "content" : { "Fn::Join" : ["", [
						        "[cfn-auto-reloader-hook]\n",
						        "triggers=post.update\n",
						        "path=Resources.BackEndRoutingConfiguration.Metadata.AWS::CloudFormation::Init\n",
						        "action=/opt/aws/bin/cfn-init -v ",
						          "--stack ", { "Ref" : "AWS::StackName" },
						          "--resource BackEndRoutingConfiguration ",
						          "--configsets config_routing_server ",
						          "--region ", { "Ref" : "AWS::Region" }, "\n"
						      ]]},
							      "mode"  : "000400",
							      "owner" : "root",
							      "group" : "root" 
					    	}
					    },
					    "services" : {
					    	"sysvinit" : {
					      		"cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
					            	"files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
	    						}
	  						}
						}
					},
					"install_nodejs": {
						"commands" : {
							"01_install_node" : {
								"command" : "yum install -y nodejs npm --enablerepo=epel"
							},
							"02_install_git" : {
								"command" : "yum install -y git"
							},
							"03_install_forever" : {
								"command" : "npm install -g forever"
							}
						}
					},
					"download_files": {
						"commands" : {
							"01_download_kcl_and_server" : {
								"command" : { "Fn::Join" : ["", [
									"aws s3 cp --recursive s3://",
									{ "Ref" : "KinesisConsumerBucket" },
									"/",
									{"Ref": "Version"},
									"/kinesis-consumer",
									" /home/ec2-user/kinesis/consumer"
								]]}
							},
							"02_download_kcl_and_server" : {
								"command" : { "Fn::Join" : ["", [
									"aws s3 cp --recursive s3://",
									{ "Ref" : "KinesisConsumerBucket" },
									"/",
									{"Ref": "Version"},
									"/be-routing-server",
									" /home/ec2-user/kinesis/server"
								]]}
							},
							"03_download_new-day_cronjob" : {
								"command" : { "Fn::Join" : ["", [
									"aws s3 cp --recursive s3://",
									{ "Ref" : "KinesisConsumerBucket" },
									"/",
									{"Ref": "Version"},
									"/cron/new-day",
									" /home/ec2-user/kinesis/cron"
								]]}
							},
							"04_install_kcl_dependencies" : {
								"command" : "npm install",
								"cwd" : "/home/ec2-user/kinesis/consumer"
							},
							"05_install_server_dependencies" : {
								"command" : "npm install",
								"cwd" : "/home/ec2-user/kinesis/server"
							},
							"06_install_new-day_cronjob" : {
								"command" : "npm install",
								"cwd" : "/home/ec2-user/kinesis/cron"
							}
						}
					},
					"create_config_files" : {
						"files" : {
							"/home/ec2-user/kinesis/consumer/env/app-variables.js" : {
								"content" : { "Fn::Join" : ["", [
									"\"use strict\";\n",
									"module.exports = {\n",
									"HTTP: {\n",
									"HOST : \"127.0.0.1\",\n",
									"PORT : \"80\"\n",
									"},\n",
									"CRYPTO: {\n",
									"PASSPHRASE : \"", { "Ref" : "CryptoPassPhrase" }, "\"\n",
									"}\n",
									"};"
								]]}
							},
							"/home/ec2-user/kinesis/server/env/development.js" : {
								"content" : { "Fn::Join" : ["", [
									"\"use strict\";\n",
									"module.exports = {\n",
									"MONGO: {\n",
									"REPL_MEMBER_1_IP: \"", { "Ref" : "MongoPrimaryPrivateIp" }, "\",\n",
									"REPL_MEMBER_2_IP: \"", { "Ref" : "MongoSecondaryPrivateIp" }, "\",\n",
									"REPL_MEMBER_3_IP: \"", { "Ref" : "MongoSecondaryTwoPrivateIp" }, "\",\n",
									"DATABASE_NAME: \"", { "Ref" : "DatabaseName" }, "\",\n",
									"REPL_SET_NAME: \"", { "Ref" : "ReplicaSetName" }, "\"\n",
									"},\n",
									"S3: {\n",
									"BUCKET: \"", { "Ref" : "CredentialBucket" }, "\",\n",
									"KEYS: {\n",
									"DB_USER: \"mongo/users/dbmain.js\"\n",
									"}\n",
									"},\n",
									"INSTANCE_FUNCTION: \"Back_End_Routing_Server\",\n",
									"KINESIS_LOG_STREAM: '", { "Ref" : "KinesisLogStreamName" }, "',\n",
									"};"
								]]}
							}
						}
					},
					"make_files_executable" : {
						"commands" : {
							"01_make_kcl_executable" : {
								"command" : "chmod +x kcl-bootstrap",
								"cwd" : "/home/ec2-user/kinesis/consumer/bin"
							}
						}
					},
					"create_log_directories" : {
						"commands" : {
							"01_create_server_dir" : {
								"command" : "mkdir /var/log/server"
							},
							"02_create_consumer_dir" : {
								"command" : "mkdir /var/log/consumer"
							}
						}
					},
					"startup" : {
						"commands" : {
							"01_startup_server" : {
								"command" : "forever start -l /var/log/server/forever.log -e /var/log/server/err.log server.js",
								"cwd": "/home/ec2-user/kinesis/server"	
							},
							"02_startup_kcl": {
								"command": "forever start -l /var/log/consumer/forever.log ../bin/kcl-bootstrap --java /usr/bin/java -e -p ./properties",
								"cwd" : "/home/ec2-user/kinesis/consumer/app"
							},
							"03_startup_cron": {
								"command": "echo \"32  23  *  *  * root NODE_ENV=development node /home/ec2-user/kinesis/cron/new-day.js\" >> /etc/crontab"
							}
						}
					}
				}
			}
		}
	}
}
