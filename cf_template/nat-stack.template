{
	"AWSTemplateFormatVersion" : "2010-09-09",
	"Description" : "Version 0.0.7 template for creating a NAT Server with an Elastic Network Interface",

	"Parameters" : {
		
		"NATInstanceType" : {
			"Description" : "Type of instance to be used for the NAT Server",
			"Type" : "String"
		},

		"NATKeyPair" : {
			"Description" : "Name of an existing EC2 key pair to enable SSH access to the NAT Instance",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Default" : "NAT",
      		"ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
		},

		"PublicSubnetOne" : { 
			"Description" : "Public Subnet in us-east-1a",
			"Type" : "AWS::EC2::Subnet::Id"
		},

		"PublicSubnetTwo" : { 
			"Description" : "Public Subnet in us-east-1c",
			"Type" : "AWS::EC2::Subnet::Id"
		},

		"PrivateRouteTable" : {
			"Description" : "Private Route Table",
			"Type" : "String"
		},

		"NATServerSecurityGroup" : {
			"Description" : "Security Group Id for the NAT Server",
			"Type" : "AWS::EC2::SecurityGroup::Id"
		},

		"ProductionEnvironment" : {
			"Description" : "Production environment for the VPC - (Dev1, Alpha, Beta, Pre-Prod, Prod, Test)",
			"Type" : "String",
			"Default" : "Dev1",
			"AllowedValues" : [ "Dev1", "Alpha", "Beta", "Pre-Prod", "Prod", "Test" ],
			"ConstraintDescription" : "must be either Dev1, Alpha or Prod."
		}
	},

	"Mappings" : {
		"AWSInstanceType2Arch" : {
			"t2.micro"  : { "Arch" : "64" },
			"t2.small"  : { "Arch" : "64" },
			"t2.medium" : { "Arch" : "64" },
			"m1.small"  : { "Arch" : "64" },
			"m1.medium" : { "Arch" : "64" },
			"m3.medium" : { "Arch" : "64" },
			"m3.large"  : { "Arch" : "64" }
		},
		"AWSRegionArch2AMI" : {
			"us-east-1" : { "64" : "ami-184dc970" }
		}
	},

	"Resources" : {

		"ENIElasticIp" : {
			"Type" : "AWS::EC2::EIP",
			"Properties" : {
				"Domain" : "vpc"
			}
		},

		"ElasticNetworkInterface" : {
			"Type" : "AWS::EC2::NetworkInterface",
			"Properties" : {
				"Description" : "Network interface for the NAT server",
				"GroupSet" : [ { "Ref" : "NATServerSecurityGroup" } ],
				"SubnetId" : { "Ref" : "PublicSubnetOne" },
				"SourceDestCheck" : false
			} 
		},

		"ElasticNetworkEIPAssociation" : {
			"Type" : "AWS::EC2::EIPAssociation",
			"DependsOn" : [ "ElasticNetworkInterface" ],
			"Properties" : {
				"AllocationId" : { "Fn::GetAtt" : [ "ENIElasticIp", "AllocationId" ] },
				"NetworkInterfaceId" : { "Ref" : "ElasticNetworkInterface" }
			}
		},

		"PrivateRoute" : {
			"Type" : "AWS::EC2::Route",
			"DependsOn" : [ "NATServer" ],
			"Properties" : {
				"DestinationCidrBlock" : "0.0.0.0/0",
				"NetworkInterfaceId" : { "Ref" : "ElasticNetworkInterface" },
				"RouteTableId" : { "Ref" : "PrivateRouteTable" }
			}
		},

		"NATServerIAMRole" : {
			"Type" : "AWS::IAM::Role",
			"Properties" : {
				"AssumeRolePolicyDocument" : {
					"Version" : "2012-10-17",
					"Statement" : [{ 
						"Effect" : "Allow",
						"Principal" : {
							"Service" : [ "ec2.amazonaws.com"]
						},
						"Action" : [ "sts:AssumeRole" ]
					}]
				},
				"Path" : "/",
				"Policies" : [{
					"PolicyName" : "root",
					"PolicyDocument" : {
						"Version" : "2012-10-17",
						"Statement" : [
						{
							"Effect" : "Allow",
							"Action" : "ec2:AttachNetworkInterface",
							"Resource" : "*"
						}]
					}
				}]
			}
		},

		"NATServerInstanceProfile" : {
			"Type" : "AWS::IAM::InstanceProfile",
			"Properties" : {
				"Path" : "/",
				"Roles" : [ { "Ref" : "NATServerIAMRole"} ]
			}
		},

		"NATServer" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn" : [ "ElasticNetworkInterface" ],
			"Properties" : {
				"LaunchConfigurationName" : { "Ref" : "NATServerConfiguration" },
				"MaxSize" : "2",
				"MinSize" : "1",
				"Tags" : [{
					"Key" : "Name",
					"Value" : { "Fn::Join" : ["", [ { "Ref" : "ProductionEnvironment" }, "-NATServer" ] ] },
					"PropagateAtLaunch" : true
				}],
				"VPCZoneIdentifier" : [ { "Ref" : "PublicSubnetOne" } ]
			}
		},

		"NATServerConfiguration" : {
			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"DependsOn" : [ "ElasticNetworkInterface" ],
			"Properties" : {
				"ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, { "Fn::FindInMap": [ "AWSInstanceType2Arch", { "Ref" : "NATInstanceType" }, "Arch" ] } ] },
				"InstanceType" : { "Ref": "NATInstanceType" },
				"IamInstanceProfile" : { "Ref" : "NATServerInstanceProfile" },
				"KeyName" : { "Ref" : "NATKeyPair" }, 
				"SecurityGroups" : [ { "Ref" : "NATServerSecurityGroup" } ],
				"InstanceMonitoring" : false,
				"UserData" : {
					"Fn::Base64" : { "Fn::Join" : ["", [
						"#!/bin/bash\n",
						"yum update -y\n",

						"#Store the Network Interface Id\n",
						"echo ", { "Ref" : "ElasticNetworkInterface" }, " > /var/tmp/eni-id.txt\n",

						"#Grab the executable bash script\n",
						"/opt/aws/bin/cfn-init -v ",
						"--stack ", { "Ref" : "AWS::StackName" },
						" --resource NATServerConfiguration ",
						"--configsets config_nat_server ",
						"--region ", { "Ref" : "AWS::Region" }, "\n",

						"#execute bash script to attach Network Interface\n",
						"chmod +x /usr/local/bin/attach_eth1_eni.sh\n",
						"/usr/local/bin/attach_eth1_eni.sh\n",
						"sleep 60\n",
						"ifdown eth0\n",

						"#Configure NAT forwarding\n",
						"iptables -t nat -A POSTROUTING -j MASQUERADE\n",
						"iptables -A FORWARD -j ACCEPT\n",

						"/opt/aws/bin/cfn-signal -e $? ",
						"--stack ", { "Ref" : "AWS::StackName" },
						" --resource NATServer ",
						"--region ", { "Ref" : "AWS::Region" }, "\n"
					]]}
				}
			},
			"Metadata" : {
				"AWS::CloudFormation::Init" : {
					"configSets" : {
						"config_nat_server" : [ "install_cfn", "create_bash_script" ]
					},
					"install_cfn" : {
					    "files" : {
						    "/etc/cfn/cfn-hup.conf" : {
						      "content" : { "Fn::Join" : ["", [
						        "[main]\n",
						        "stack=", { "Ref": "AWS::StackId" }, "\n",
						        "region=", { "Ref" : "AWS::Region" }, "\n"
						      ]]},
						      "mode"  : "000400",
						      "owner" : "root",
						      "group" : "root"
						    },
					    	"/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
						        "content" : { "Fn::Join" : ["", [
						        "[cfn-auto-reloader-hook]\n",
						        "triggers=post.update\n",
						        "path=Resources.MongoDBPrimaryServer.Metadata.AWS::CloudFormation::Init\n",
						        "action=/opt/aws/bin/cfn-init -v ",
						          "--stack ", { "Ref" : "AWS::StackName" },
						          "--resource MongoDBPrimaryServer ",
						          "--configsets config_mongodb ",
						          "--region ", { "Ref" : "AWS::Region" }, "\n"
						      ]]},
							      "mode"  : "000400",
							      "owner" : "root",
							      "group" : "root" 
					    	}
					    },
					    "services" : {
					    	"sysvinit" : {
					      		"cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
					            	"files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
	    						}
	  						}
						}
					},
					"create_bash_script" : {
						"files" : {
							"/usr/local/bin/attach_eth1_eni.sh" : {
								"content" : { "Fn::Join" : ["", [
									"#!/bin/bash\n",
									"function log () {\n",
									"echo \"$(date +\"%b %e %T\") $@\"\n",
									"logger -- $(basename $0)\" - $@\"\n",
									"}\n",
									"my_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
									"my_eni_id=$(cat /var/tmp/eni-id.txt)\n",
									"export AWS_DEFAULT_REGION=\"us-east-1\"\n",
									"/usr/bin/aws ec2 attach-network-interface --network-interface-id ${my_eni_id} --instance-id ${my_instance_id} --device-index 1\n",
									"retcode=$?\n",
									"[ \"$retcode\" -eq 0 ] && { log \"eni attachment successful\" ; exit 0 ; } || { log \"eni attachment failed\" ; exit 1 ; }\n",
									"}"
								]]}
							}
						}
					}
				}
			}
		}
	}
}